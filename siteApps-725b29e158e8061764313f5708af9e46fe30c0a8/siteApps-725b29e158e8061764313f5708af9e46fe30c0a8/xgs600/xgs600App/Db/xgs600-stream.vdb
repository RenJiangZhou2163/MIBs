#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBDEND


#
# EPICS STREAM DB with STREAM for Agilent XGS-600
#
# - Author  : Jeong Han Lee    
# - email   : jhlee@ibs.re.kr
# - license : EPICS open license
# 
#  v0.9    Sunday, June 21 18:47:41 KST 2015, jhlee
#         - 
# 
#
# TODO
# - need "General Error Codes handling logic" in Manual 4-6 
#   For CNV, introduce a logic to handle Open, but I never test them in various
#   situations. And in others sensors type case, should add that logic into...
#   Sunday, June 21 18:50:26 KST 2015, jhlee
#
# Software Revision
#
##############################################################
record(stringin, "$(SYSDEV)SWRev") {
  field(DESC, "XGS-600 Software revision")
  field(DTYP, "stream")
  field(INP, "@xgs600.proto sw-rev($(ID)) $(PORT)")
  field(PINI, "YES")
}

#
# System Reset
# Command       #aa06
# Response      >
#
# Still don't understand what this command means
# Thursday, June 18 22:26:46 KST 2015, jhlee
##############################################################
record(bo, "$(SYSDEV)Rst") {
  field(DESC, "XGS 600 Reset")
  field(DTYP, "stream")
  field(OUT, "@xgs600.proto rst($(ID)) $(PORT)")
}

# Read XGS contents
#
# command           #aa01 
# response          >hhhhhhhhhhhh
#
# 6 hhs represents "slot 0,1,2,3,4,5"
# 10 = Hot Filament Ion Gauge board (HFIG)
# 3A = Inverted Magnetron board (IMG)
# 40 = convection board (CNV)
# 4C = Analog Board
# FE = Empty Slot 
############################################################
record(stringin, "$(SYSDEV)Contents") {
  field(DESC, "XGS-600 contents")
  field(DTYP, "stream")
  field(INP, "@xgs600.proto read-xgs($(ID),$(SYSDEV)) $(PORT)")
  field(PINI, "YES")
}

record(stringin, "$(SYSDEV)Slot0") {
  field(DESC, "XGS-600 slot0")
  field(DTYP, "Soft Channel")
}

record(stringin, "$(SYSDEV)Slot1") {
  field(DESC, "XGS-600 slot1")
  field(DTYP, "Soft Channel")
}

record(stringin, "$(SYSDEV)Slot2") {
  field(DESC, "XGS-600 slot2")
  field(DTYP, "Soft Channel")
}

record(stringin, "$(SYSDEV)Slot3") {
  field(DESC, "XGS-600 slot3")
  field(DTYP, "Soft Channel")
}

record(stringin, "$(SYSDEV)Slot4") {
  field(DESC, "XGS-600 slot4")
  field(DTYP, "Soft Channel")
}

record(stringin, "$(SYSDEV)Slot5") {
  field(DESC, "XGS-600 slot5")
  field(DTYP, "Soft Channel")
}

# Pressure Unit : Table B-1
# 
# Set the unit to
# Unit   command      response
# Torr   #aa01        >
# mBar   #aa11        >
# Pascal #aa12        >
# 
# Examples :
# 
# caput RFQ:VAC::PUnitSet {0|1|2}
# caput RFQ:VAC::PUnitSet {Torr|mBar|Pascal}
# 
# ###########################################################
# record(ao, "$(SYSDEV):SetPUnit") {
# field(DESC, "Set Pressure Unit")
# field(DTYP, "stream")
# field( OUT, "@xgs600.proto setPresUnit($(ID)) $(PORT) ")
# field(FLNK, "$(SYSDEV):GetPUnit")
# }
# record(ai, "$(SYSDEV):GetPUnit") {
# field(DESC, "Get Pressure Unit")
# field(DTYP, "stream")
# field( INP, "@xgs600.proto getPresUnit($(ID))  $(PORT)")
# field(PINI, "YES")
# }
record(mbbo, "$(SYSDEV)PUnitSet") {
  field(DESC, "Set Pressure Unit")
  field(DTYP, "stream")
  field(OUT, "@xgs600.proto setPresUnit($(ID)) $(PORT) ")
  field(ZRST, "Torr")
  field(ZRVL, "0")
  field(ONST, "mBar")
  field(ONVL, "1")
  field(TWST, "Pascal")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  field(FLNK, "$(SYSDEV)PUnitGet")
}

# Read the unit 
# Unit   command      response  
# Torr     #aa13        >00        
# mBar     #aa13        >01        
# Pascal   #aa13        >02        
#
record(mbbi, "$(SYSDEV)PUnitGet") {
  field(DESC, "Get Pressure Unit")
  field(DTYP, "stream")
  field(INP, "@xgs600.proto getPresUnit($(ID)) $(PORT)")
  field(ZRST, "Torr")
  field(ZRVL, "0")
  field(ONST, "mBar")
  field(ONVL, "1")
  field(TWST, "Pascal")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(PINI, "YES")
}

#
# Setup Lockout : 3-16 / Table B-3 
#
# Toggle this to ON to make all filed on the SYSTEM SETUP and
# SENSOR SETUP screen display-only (except for this field). This
# provides a layer of security to prevent inadvertent change.
# 
# So, the initial value within IOC is set to ON
# Friday, June 19 15:44:16 KST 2015, jhlee
#  
# Status       command      response
# Lockout OFF  #aa20        >
# Lockout ON   #aa21        >
# Examples : 
# 
# caput RFQ:VAC:LockoutSet {Off|On}
# caput RFQ:VAC:LockoutSet {0|1}
#############################################################
record(bo, "$(SYSDEV)LockoutSet") {
  field(DESC, "Lockout OFF or ON")
  field(DTYP, "stream")
  field(OUT, "@xgs600.proto setLockout($(ID)) $(PORT) ")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(PINI, "YES")
  field(VAL, "1")
  field(FLNK, "$(SYSDEV)LockoutGet")
}

# caget  RFQ:VAC:LockoutGet
# RFQ:VAC:LockoutGet             On
record(bi, "$(SYSDEV)LockoutGet") {
  field(DESC, "Readback zero check status")
  field(DTYP, "stream")
  field(INP, "@xgs600.proto getLockout($(ID)) $(PORT)")
  field(ZNAM, "Off")
  field(ONAM, "On")
}

#
# For a testing system, I have HFIG1 and CNV1/2, 
# So, the fixed pressure reading function is used.
# 
# I would like to use the Pressure unit got from $(SYSDEV)PUnitGet 
# dynamically, so FLNK to $(SYSDEV)PRES1_EGU, and use DOL field
# in stringout with OMSL (output mode selection) as closed_loop.
# So whenever reading a pressure, it get the current pressure unit,
# and put it into EGU field in the signal PRES1. 
# It is really nice to have them dynamically, because it will remove
# the possibility that someone may change the pressure unit while
# we are scanning the pressure value. I think, it may be very rare
# events. 
#
# Friday, June 19 19:24:29 KST 2015, jhlee
record(ai, "$(SYSDEV)HFIG1") {
  field(DESC, "Pressure HFIG1")
  field(DTYP, "stream")
  field(INP, "@xgs600.proto readPressHFIG1($(ID)) $(PORT)")
  field(PINI, "NO")
  field(SCAN, "1 second")
#
#   for camonitor triggering...
#   field(MDEL, "-1")
#
  field(FLNK, "$(SYSDEV)HFIG1_EGU")
}

# From https://wiki-ext.aps.anl.gov/epics/index.php/RRM_3-14_String_Output
# The string output record must specify from where it gets its desired output string. 
# The first field that determines where the desired output originates is the output 
# mode select (OSML) field, which can have two possible value: closed_loop or supervisory. 
#
# If supervisory is specified, DOL is ignored, the current value of VAL is written, and 
# the VAL can be changed externally via dbPuts at run-time. 
#
# If closed_loop is specified, the VAL field's value is obtained from the address 
# specified in the desired output location field (DOL) which can be either a database 
# link or a channel access link.
record(stringout, "$(SYSDEV)HFIG1_EGU") {
#   does't matter it has the inital constant VAL or not.
#
#    field( VAL, "Torr")
#
  field(OUT, "$(SYSDEV)HFIG1.EGU")
  field(DOL, "$(SYSDEV)PUnitGet.VAL")
  field(OMSL, "closed_loop")
}

#
# http://epics.web.psi.ch/software/streamdevice/doc/tipsandtricks.html#argvar
#
# If there is no Convection sensor detected,
# "readpress returns 'OPEN'. 
# So, we need the mismatch to pass them into string
# Sunday, June 21 18:45:33 KST 2015, jhlee
record(stringin, "$(SYSDEV)CNV1_MSG") {
}

record(ai, "$(SYSDEV)CNV1") {
  field(DESC, "Pressure CNV1")
  field(DTYP, "stream")
  field(INP, "@xgs600.proto readPressCNV1($(ID),$(SYSDEV)CNV1_MSG) $(PORT)")
  field(PINI, "NO")
  field(SCAN, "1 second")
  field(FLNK, "$(SYSDEV)CNV1_EGU")
}

record(stringout, "$(SYSDEV)CNV1_EGU") {
  field(OUT, "$(SYSDEV)CNV1.EGU")
  field(DOL, "$(SYSDEV)PUnitGet.VAL")
  field(OMSL, "closed_loop")
}

# Must verify, how it works.
# Still don't understand how it works....
record(calcout, "$(SYSDEV):CNV1_clean1") {
  field(INPA, "$(SYSDEV)CNV1.SEVR CP")
  field(CALC, "A!=2")
  field(OOPT, "When Non-zero")
  field(OUT, "$(SYSDEV):CNV1_clean2.PROC")
}

record(stringout, "$(SYSDEV):CNV1_clean2") {
  field(VAL, "CNV1 Detected")
  field(OUT, "$(SYSDEV)CNV1_MSG PP")
}

record(ai, "$(SYSDEV)CNV2") {
  field(DESC, "Pressure CNV2")
  field(DTYP, "stream")
  field(INP, "@xgs600.proto readPressCNV2($(ID)) $(PORT)")
  field(PINI, "NO")
  field(SCAN, "1 second")
  field(FLNK, "$(SYSDEV)CNV2_EGU")
}

record(stringout, "$(SYSDEV)CNV2_EGU") {
  field(OUT, "$(SYSDEV)CNV2.EGU")
  field(DOL, "$(SYSDEV)PUnitGet.VAL")
  field(OMSL, "closed_loop")
}

record(ai, "$(SYSDEV)AUX1") {
  field(DESC, "Pressure AUX1")
  field(DTYP, "stream")
  field(INP, "@xgs600.proto readPressAUX1($(ID)) $(PORT)")
  field(PINI, "NO")
  field(SCAN, "1 second")
  field(FLNK, "$(SYSDEV)AUX1_EGU")
}

record(stringout, "$(SYSDEV)AUX1_EGU") {
  field(OUT, "$(SYSDEV)AUX1.EGU")
  field(DOL, "$(SYSDEV)PUnitGet.VAL")
  field(OMSL, "closed_loop")
}

record(ai, "$(SYSDEV)AUX2") {
  field(DESC, "Pressure AUX2")
  field(DTYP, "stream")
  field(INP, "@xgs600.proto readPressAUX2($(ID)) $(PORT)")
  field(PINI, "NO")
  field(SCAN, "1 second")
  field(FLNK, "$(SYSDEV)AUX2_EGU")
}

record(stringout, "$(SYSDEV)AUX2_EGU") {
  field(OUT, "$(SYSDEV)AUX2.EGU")
  field(DOL, "$(SYSDEV)PUnitGet.VAL")
  field(OMSL, "closed_loop")
}

#! Further lines contain data used by VisualDCT
#! View(0,0,1.0)
#! Record("$(SYSDEV)SWRev",20,28,0,0,"$(SYSDEV)SWRev")
#! Record("$(SYSDEV)Rst",260,22,0,0,"$(SYSDEV)Rst")
#! Record("$(SYSDEV)Contents",500,28,0,0,"$(SYSDEV)Contents")
#! Record("$(SYSDEV)Slot0",740,16,0,0,"$(SYSDEV)Slot0")
#! Record("$(SYSDEV)Slot1",980,16,0,0,"$(SYSDEV)Slot1")
#! Record("$(SYSDEV)Slot2",1220,16,0,0,"$(SYSDEV)Slot2")
#! Record("$(SYSDEV)Slot3",1460,16,0,0,"$(SYSDEV)Slot3")
#! Record("$(SYSDEV)Slot4",1700,16,0,0,"$(SYSDEV)Slot4")
#! Record("$(SYSDEV)Slot5",1940,16,0,0,"$(SYSDEV)Slot5")
#! Record("$(SYSDEV)PUnitSet",240,257,0,0,"$(SYSDEV)PUnitSet")
#! Field("$(SYSDEV)PUnitSet.FLNK",16777215,0,"$(SYSDEV)PUnitSet.FLNK")
#! Link("$(SYSDEV)PUnitSet.FLNK","$(SYSDEV)PUnitGet")
#! Record("$(SYSDEV)PUnitGet",240,710,0,0,"$(SYSDEV)PUnitGet")
#! Field("$(SYSDEV)PUnitGet.VAL",16777215,1,"$(SYSDEV)PUnitGet.VAL")
#! Record("$(SYSDEV)LockoutSet",2760,152,0,0,"$(SYSDEV)LockoutSet")
#! Field("$(SYSDEV)LockoutSet.FLNK",16777215,0,"$(SYSDEV)LockoutSet.FLNK")
#! Link("$(SYSDEV)LockoutSet.FLNK","$(SYSDEV)LockoutGet")
#! Record("$(SYSDEV)LockoutGet",2380,134,0,1,"$(SYSDEV)LockoutGet")
#! Record("$(SYSDEV)HFIG1",1120,400,0,0,"$(SYSDEV)HFIG1")
#! Field("$(SYSDEV)HFIG1.FLNK",16777215,0,"$(SYSDEV)HFIG1.FLNK")
#! Link("$(SYSDEV)HFIG1.FLNK","$(SYSDEV)HFIG1_EGU")
#! Field("$(SYSDEV)HFIG1.EGU",16777215,0,"$(SYSDEV)HFIG1.EGU")
#! Record("$(SYSDEV)HFIG1_EGU",760,602,0,1,"$(SYSDEV)HFIG1_EGU")
#! Field("$(SYSDEV)HFIG1_EGU.OUT",16777215,1,"$(SYSDEV)HFIG1_EGU.OUT")
#! Link("$(SYSDEV)HFIG1_EGU.OUT","$(SYSDEV)HFIG1.EGU")
#! Field("$(SYSDEV)HFIG1_EGU.DOL",16777215,0,"$(SYSDEV)HFIG1_EGU.DOL")
#! Link("$(SYSDEV)HFIG1_EGU.DOL","$(SYSDEV)PUnitGet.VAL")
#! Record("$(SYSDEV)CNV1_MSG",2160,863,0,0,"$(SYSDEV)CNV1_MSG")
#! Field("$(SYSDEV)CNV1_MSG.VAL",16777215,0,"$(SYSDEV)CNV1_MSG.VAL")
#! Record("$(SYSDEV)CNV1",1120,800,0,0,"$(SYSDEV)CNV1")
#! Field("$(SYSDEV)CNV1.FLNK",16777215,0,"$(SYSDEV)CNV1.FLNK")
#! Link("$(SYSDEV)CNV1.FLNK","$(SYSDEV)CNV1_EGU")
#! Field("$(SYSDEV)CNV1.EGU",16777215,0,"$(SYSDEV)CNV1.EGU")
#! Field("$(SYSDEV)CNV1.SEVR",16777215,1,"$(SYSDEV)CNV1.SEVR")
#! Record("$(SYSDEV)CNV1_EGU",760,982,0,1,"$(SYSDEV)CNV1_EGU")
#! Field("$(SYSDEV)CNV1_EGU.OUT",16777215,1,"$(SYSDEV)CNV1_EGU.OUT")
#! Link("$(SYSDEV)CNV1_EGU.OUT","$(SYSDEV)CNV1.EGU")
#! Field("$(SYSDEV)CNV1_EGU.DOL",16777215,0,"$(SYSDEV)CNV1_EGU.DOL")
#! Link("$(SYSDEV)CNV1_EGU.DOL","$(SYSDEV)PUnitGet.VAL")
#! Record("$(SYSDEV):CNV1_clean1",1500,808,0,0,"$(SYSDEV):CNV1_clean1")
#! Field("$(SYSDEV):CNV1_clean1.INPA",16777215,0,"$(SYSDEV):CNV1_clean1.INPA")
#! Link("$(SYSDEV):CNV1_clean1.INPA","$(SYSDEV)CNV1.SEVR")
#! Field("$(SYSDEV):CNV1_clean1.OUT",16777215,1,"$(SYSDEV):CNV1_clean1.OUT")
#! Link("$(SYSDEV):CNV1_clean1.OUT","$(SYSDEV):CNV1_clean2.PROC")
#! Record("$(SYSDEV):CNV1_clean2",1860,816,0,0,"$(SYSDEV):CNV1_clean2")
#! Field("$(SYSDEV):CNV1_clean2.PROC",16777215,0,"$(SYSDEV):CNV1_clean2.PROC")
#! Field("$(SYSDEV):CNV1_clean2.OUT",16777215,1,"$(SYSDEV):CNV1_clean2.OUT")
#! Link("$(SYSDEV):CNV1_clean2.OUT","$(SYSDEV)CNV1_MSG.VAL")
#! Record("$(SYSDEV)CNV2",1120,1120,0,0,"$(SYSDEV)CNV2")
#! Field("$(SYSDEV)CNV2.FLNK",16777215,0,"$(SYSDEV)CNV2.FLNK")
#! Link("$(SYSDEV)CNV2.FLNK","$(SYSDEV)CNV2_EGU")
#! Field("$(SYSDEV)CNV2.EGU",16777215,0,"$(SYSDEV)CNV2.EGU")
#! Record("$(SYSDEV)CNV2_EGU",760,1282,0,1,"$(SYSDEV)CNV2_EGU")
#! Field("$(SYSDEV)CNV2_EGU.OUT",16777215,1,"$(SYSDEV)CNV2_EGU.OUT")
#! Link("$(SYSDEV)CNV2_EGU.OUT","$(SYSDEV)CNV2.EGU")
#! Field("$(SYSDEV)CNV2_EGU.DOL",16777215,0,"$(SYSDEV)CNV2_EGU.DOL")
#! Link("$(SYSDEV)CNV2_EGU.DOL","$(SYSDEV)PUnitGet.VAL")
#! Record("$(SYSDEV)AUX1",1120,1380,0,0,"$(SYSDEV)AUX1")
#! Field("$(SYSDEV)AUX1.FLNK",16777215,0,"$(SYSDEV)AUX1.FLNK")
#! Link("$(SYSDEV)AUX1.FLNK","$(SYSDEV)AUX1_EGU")
#! Field("$(SYSDEV)AUX1.EGU",16777215,0,"$(SYSDEV)AUX1.EGU")
#! Record("$(SYSDEV)AUX1_EGU",760,1502,0,1,"$(SYSDEV)AUX1_EGU")
#! Field("$(SYSDEV)AUX1_EGU.OUT",16777215,1,"$(SYSDEV)AUX1_EGU.OUT")
#! Link("$(SYSDEV)AUX1_EGU.OUT","$(SYSDEV)AUX1.EGU")
#! Field("$(SYSDEV)AUX1_EGU.DOL",16777215,0,"$(SYSDEV)AUX1_EGU.DOL")
#! Link("$(SYSDEV)AUX1_EGU.DOL","$(SYSDEV)PUnitGet.VAL")
#! Record("$(SYSDEV)AUX2",1120,1640,0,0,"$(SYSDEV)AUX2")
#! Field("$(SYSDEV)AUX2.FLNK",16777215,0,"$(SYSDEV)AUX2.FLNK")
#! Link("$(SYSDEV)AUX2.FLNK","$(SYSDEV)AUX2_EGU")
#! Field("$(SYSDEV)AUX2.EGU",16777215,0,"$(SYSDEV)AUX2.EGU")
#! Record("$(SYSDEV)AUX2_EGU",760,1762,0,1,"$(SYSDEV)AUX2_EGU")
#! Field("$(SYSDEV)AUX2_EGU.OUT",16777215,1,"$(SYSDEV)AUX2_EGU.OUT")
#! Link("$(SYSDEV)AUX2_EGU.OUT","$(SYSDEV)AUX2.EGU")
#! Field("$(SYSDEV)AUX2_EGU.DOL",16777215,0,"$(SYSDEV)AUX2_EGU.DOL")
#! Link("$(SYSDEV)AUX2_EGU.DOL","$(SYSDEV)PUnitGet.VAL")
