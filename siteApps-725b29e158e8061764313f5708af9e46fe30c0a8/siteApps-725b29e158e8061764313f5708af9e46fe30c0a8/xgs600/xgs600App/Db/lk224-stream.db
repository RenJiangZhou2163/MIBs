#
# EPICS STREAM DB with STREAM for 
# LakeShore Model 224 Temperature Monitor
#
# - Author  : Jeong Han Lee    
# - email   : jhlee@ibs.re.kr
# - license : EPICS open license
# 
#  - 0.1       Thursday, July 30 13:53:51 KST 2015, jhlee

##############################################################

##
# telnet 10.1.4.209 7777
# - Identification Query
# - IN : *IDN?
# - OUT: LSCI,MODEL224,224A02E/3062A6B/3062A6X,1.0
# 
record (stringin, "$(SYSDEV)IDN")
{
    field(DESC, "Identification string")
    field(DTYP, "stream")
    field( INP, "@lk224.proto getIDN $(PORT)")
#    field(PINI, "YES") 
#    It collides with *RST, so, disable it in DB, enable it in proto. 
}


# - Reset Instrument Command
#   Sets monitor parameters to power-up settings.
#
# - IN : *RST
# - OUT: NONE
record(bo, "$(SYSDEV)RST") 
{
    field(DESC, "Reset")
    field(DTYP, "stream")
    field( OUT, "@lk224.proto cmd(*RST) $(PORT)")
#    field(PINI, "YES")
}


# - Self-Test Query
#
# - IN : *TST?
# - OUT: 0 : no errors found
#        1 : errors found
# The Model 224 reports status based on test done at power up
record(bi, "$(SYSDEV)SelfTest") 
{
    field(DESC, "Self-Test Query")
    field(DTYP, "stream")
    field( INP, "@lk224.proto cmd(*TST?) $(PORT)")
    field(ZNAM, "No Error")
    field(ONAM, "Error")
}

# Front Panel Remote and Ethernet Blue LEDs Command / Query
#
# If set to 0, front panel LEDs will not be functional. 
# Function can be used when display brightness is a problem

# Command 
#
# LEDS 0 : off
# LEDS 1 : on
#
# If setLEDS function in the protocol file is defined as follows: 
# setLEDS {out LEDS %{0|1};}, 
# we can use "caput $(SYSDEV)LEDStatusSet {On|Off}" and "caput $(SYSDEV)LEDStatusSet {0|1}". 

#
record(bo, "$(SYSDEV)LEDStatusSet") 
{
    field(DTYP, "stream")
    field( OUT, "@lk224.proto setLEDS $(PORT) ")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(FLNK, "$(SYSDEV)LEDStatus")
}

# $camonitor $(SYSDEV)LEDStatus
# RFQ:TEM01:LEDStatus            2015-07-30 18:14:21.975427 On  
# RFQ:TEM01:LEDStatus            2015-07-30 18:14:39.398564 Off 
#
# $ camonitor -n RFQ:TEM01:LEDStatus
# RFQ:TEM01:LEDStatus            2015-07-30 18:14:39.398564 0  
# RFQ:TEM01:LEDStatus            2015-07-30 20:57:45.936677 1 

record(bi, "$(SYSDEV)LEDStatus") 
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto getLEDS $(PORT)")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(PINI, "YES")
}


 
#
# Remote Interface Mode
#
# Set Mode to
#
# Mode                        Command
# local                       MODE 0
# remote                      MODE 1
# remote with local lockout   MODE 2
#
# Examples :
# $ caput RFQ:TEM01:ModeSet 0
# Old : RFQ:TEM01:ModeSet              Remote
# New : RFQ:TEM01:ModeSet              Local
# $ caput RFQ:TEM01:ModeSet 1
# Old : RFQ:TEM01:ModeSet              Local
# New : RFQ:TEM01:ModeSet              Remote
# $ caput RFQ:TEM01:ModeSet 2
# Old : RFQ:TEM01:ModeSet              Remote
# New : RFQ:TEM01:ModeSet              RemoteLock
# $ caput RFQ:TEM01:ModeSet Local
# Old : RFQ:TEM01:ModeSet              Remote
# New : RFQ:TEM01:ModeSet              Local
# $ caput RFQ:TEM01:ModeSet RemLocLock
# Old : RFQ:TEM01:ModeSet              Local
# New : RFQ:TEM01:ModeSet              RemLocLock
# jhlee@kaffee:~$ caput RFQ:TEM01:ModeSet Remote
# Old : RFQ:TEM01:ModeSet              RemLocLock
# New : RFQ:TEM01:ModeSet              Remote


record(mbbo, "$(SYSDEV)ModeSet") 
{
    field(DESC, "Remote Interface Mode")
    field(DTYP, "stream")
    field( OUT, "@lk224.proto setMode $(PORT) ")
    field(ZRST, "Local")
    field(ZRVL, "0")
    field(ONST, "Remote")
    field(ONVL, "1")
    field(TWST, "RemLocLock")
    field(TWVL, "2")
    field(THSV, "INVALID")
    field(FRSV, "INVALID")
    field(FVSV, "INVALID")
    field(SXSV, "INVALID")
    field(SVSV, "INVALID")
    field(EISV, "INVALID")
    field(NISV, "INVALID")
    field(TESV, "INVALID")
    field(ELSV, "INVALID")
    field(TVSV, "INVALID")
    field(TTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FFSV, "INVALID")
    field(UNSV, "INVALID")
    field(IVOA, "Don't drive outputs")
#    field(PINI, "YES") 
#    field( VAL, "2")
    field(FLNK, "$(SYSDEV)ModeGet")
}

# Read the Mode by "MODE?"
# local                       0
# remote                      1
# remote with local lockout   2

# camonitor RFQ:TEM01:ModeGet
#
# RFQ:TEM01:ModeGet              2015-07-30 21:29:17.966679 Remote  
# RFQ:TEM01:ModeGet              2015-07-30 21:29:25.457952 Local  
# RFQ:TEM01:ModeGet              2015-07-30 21:29:31.559001 RemLocLock
record(mbbi, "$(SYSDEV)ModeGet") 
{
    field(DESC, "Remote Interface Mode Status")
    field(DTYP, "stream")
    field( INP, "@lk224.proto getMode $(PORT)")
    field(ZRST, "Local")
    field(ZRVL, "0")
    field(ONST, "Remote")
    field(ONVL, "1")
    field(TWST, "RemLocLock")
    field(TWVL, "2")
    field(THSV, "INVALID")
    field(FRSV, "INVALID")
    field(FVSV, "INVALID")
    field(SXSV, "INVALID")
    field(SVSV, "INVALID")
    field(EISV, "INVALID")
    field(NISV, "INVALID")
    field(TESV, "INVALID")
    field(ELSV, "INVALID")
    field(TVSV, "INVALID")
    field(TTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FFSV, "INVALID")
    field(UNSV, "INVALID")
#    field(PINI, "YES")
}




# record (stringin, "$(SYSDEV)CPS_MSG")
# {
# }


# record (ai, "$(SYSDEV)CPS") 
# {
#     field(DESC, "Geiger Counter Counter Per Secoud") 
#     field(DTYP, "stream")
#     field( INP, "@gconpi.proto read_CPS($(SYSDEV)CPS_MSG) $(PORT)")
#     field( EGU, "CPS")
#     field(SCAN, "1 second")
# }


# #      choice(menuAlarmSevrNO_ALARM,"NO_ALARM")
# #      choice(menuAlarmSevrMINOR,"MINOR")
# #      choice(menuAlarmSevrMAJOR,"MAJOR")
# #      choice(menuAlarmSevrINVALID,"INVALID")

# # camonitor has the following option, so we can check the ENUM number directly.
# # For example, 
# # 
# # jhlee@kaffee:~$ camonitor -n RPI:RAD1:CPS.SEVR 
# # RPI:RAD1:CPS.SEVR              2015-07-29 19:43:43.321049 0  
# ## Turn off the GC
# # RPI:RAD1:CPS.SEVR              2015-07-29 19:43:48.419394 3 TIMEOUT INVALID
# ## Turn on the GC
# # RPI:RAD1:CPS.SEVR              2015-07-29 19:43:51.033409 0  
# #
# # jhlee@kaffee:~$ camonitor  RPI:RAD1:CPS.SEVR 
# # RPI:RAD1:CPS.SEVR              2015-07-29 19:43:56.011874 NO_ALARM  
# ## Turn off the GC
# # RPI:RAD1:CPS.SEVR              2015-07-29 19:44:00.419370 INVALID TIMEOUT INVALID
# ## Turn on the GC
# # RPI:RAD1:CPS.SEVR              2015-07-29 19:44:03.321081 NO_ALARM 

# # Enum format:
# #  -n:       Print DBF_ENUM values as number (default is enum string)

# # The example in the Section "I have a device that sends mixed data types: numbers or strings"
# # on STREAM device at http://epics.web.psi.ch/software/streamdevice/doc/tipsandtricks.html
# # uses A!=2 in order to represent "you can clean the message record if SEVR is not INVALID. "
# #
# # This example is WRONG! Please use A!=3 or A#3.
# # "!=" is the same operator as "#"

# # Wednesday, July 29 19:47:50 KST 2015, jhlee

# # Still don't understand CP option in calcout record.....

# record (calcout, "$(SYSDEV)CPS_clean1") 
# {
#     field(INPA, "$(SYSDEV)CPS.SEVR CP")
#     field(CALC, "A#3")           # A!=3 
#     field(OOPT, "When Non-zero") # TRUE
#     field( OUT, "$(SYSDEV)CPS_clean2.PROC")
# }

# record (stringout, "$(SYSDEV)CPS_clean2") 
# {
#     field(VAL, "CPS.SEVR is NOT INVALID")
#     field(OUT, "$(SYSDEV)CPS_MSG PP")
# }

# record (ai, "$(SYSDEV)CPM") 
# {
#     field(DESC, "Geiger Counter Counter Per Min") 
#     field(DTYP, "stream")
#     field( INP, "@gconpi.proto read_CPM $(PORT)")
#     field( EGU, "CPM")
#     field(SCAN, "I/O Intr")
# } 

# record (ai, "$(SYSDEV)uSv") 
# {
#     field(DESC, "Geiger Counter uSV/hr") 
#     field(DTYP, "stream")
#     field( INP, "@gconpi.proto read_uSv $(PORT)")
#     field( EGU, "uSv/hr")
#     field(SCAN, "I/O Intr")
# } 


# record (stringin, "$(SYSDEV)AvgMode") 
# {  
#     field(DESC, "Geiger Counter Mode") 
#     field(DTYP, "stream")
#     field( INP, "@gconpi.proto read_avgMode $(PORT)")
#     field(SCAN, "I/O Intr")
# } 






# #
# # Reading
# #
# record(ai, "$(SYSDEV)ReadAllC")
# {
#     field(DESC, "Celsius Reading Query")
#     field(DTYP, "stream")
#     field( INP, "@lk224.proto readCelsius(0) $(PORT)")
#     field(PINI, "NO")
#     field( EGU, "degreeC")
#     field(PREC, "5")
# #    field(SCAN, "1 second")
# }



# #
# # Reading
# #
# record(ai, "$(SYSDEV)ReadAllKB")
# {
#     field(DESC, "Kelvins Reading Query")
#     field(DTYP, "stream")
#     field( INP, "@lk224.proto readKelvin(B) $(PORT)")
#     field(PINI, "NO")
#     field( EGU, "degreeK")
#     field(PREC, "5")
# #    field(SCAN, "1 second")
# }

record(ai, "$(SYSDEV)AK") 
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readA_Kelvin $(PORT)")
    field( EGU, "Kelvin")
    field(PREC, "6")
    field(SCAN, "1 second")
    field(FLNK, "$(SYSDEV)ReadStatusA")
}

record (ai, "$(SYSDEV)BK") 
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readB_Kelvin $(PORT)")
    field( EGU, "Kelvin")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(SYSDEV)ReadStatusB")
}


record (ai, "$(SYSDEV)C1K") 
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readC1_Kelvin $(PORT)")
#    field( INP, "@lk224.proto readKelvin(C1) $(PORT)")
    field( EGU, "Kelvin")
    field(SCAN, "I/O Intr")
#    field(SCAN, "1 second")
    field(FLNK, "$(SYSDEV)ReadStatusC1")
}


record (ai, "$(SYSDEV)C2K") 
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readC2_Kelvin $(PORT)")
    field( EGU, "Kelvin")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(SYSDEV)ReadStatusC2")
}


record (ai, "$(SYSDEV)C3K") 
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readC3_Kelvin $(PORT)")
    field( EGU, "Kelvin")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(SYSDEV)ReadStatusC3")
}


record (ai, "$(SYSDEV)C4K") 
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readC4_Kelvin $(PORT)")
    field( EGU, "Kelvin")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(SYSDEV)ReadStatusC4")
}


record (ai, "$(SYSDEV)C5K") 
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readC5_Kelvin $(PORT)")
    field( EGU, "Kelvin")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(SYSDEV)ReadStatusC5")
}



record (ai, "$(SYSDEV)D1K") 
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readD1_Kelvin $(PORT)")
    field( EGU, "Kelvin")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(SYSDEV)ReadStatusD1")
}


record (ai, "$(SYSDEV)D2K") 
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readD2_Kelvin $(PORT)")
    field( EGU, "Kelvin")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(SYSDEV)ReadStatusD2")
}


record (ai, "$(SYSDEV)D3K") 
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readD3_Kelvin $(PORT)")
    field( EGU, "Kelvin")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(SYSDEV)ReadStatusD3")
}


record (ai, "$(SYSDEV)D4K") 
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readD4_Kelvin $(PORT)")
    field( EGU, "Kelvin")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(SYSDEV)ReadStatusD4")
}


record (ai, "$(SYSDEV)D5K") 
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readD5_Kelvin $(PORT)")
    field( EGU, "Kelvin")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(SYSDEV)ReadStatusD5")
}


record(ai, "$(SYSDEV)ReadStatusA")
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readRDGST(A) $(PORT)") 
}


record(ai, "$(SYSDEV)ReadStatusB")
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readRDGST(B) $(PORT)") 
}


record(ai, "$(SYSDEV)ReadStatusC1")
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readRDGST(C1) $(PORT)") 
#    field(SCAN, "1 second")
#    field(MDEL, "-1")
}


record(ai, "$(SYSDEV)ReadStatusC2")
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readRDGST(C2) $(PORT)") 
}


record(ai, "$(SYSDEV)ReadStatusC3")
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readRDGST(C3) $(PORT)") 
}


record(ai, "$(SYSDEV)ReadStatusC4")
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readRDGST(C4) $(PORT)") 
}


record(ai, "$(SYSDEV)ReadStatusC5")
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readRDGST(C5) $(PORT)") 
}


record(ai, "$(SYSDEV)ReadStatusD1")
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readRDGST(D1) $(PORT)") 
}


record(ai, "$(SYSDEV)ReadStatusD2")
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readRDGST(D2) $(PORT)") 
}


record(ai, "$(SYSDEV)ReadStatusD3")
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readRDGST(D3) $(PORT)") 
}


record(ai, "$(SYSDEV)ReadStatusD4")
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readRDGST(D4) $(PORT)") 
}


record(ai, "$(SYSDEV)ReadStatusD5")
{
    field(DTYP, "stream")
    field( INP, "@lk224.proto readRDGST(D5) $(PORT)") 
}

