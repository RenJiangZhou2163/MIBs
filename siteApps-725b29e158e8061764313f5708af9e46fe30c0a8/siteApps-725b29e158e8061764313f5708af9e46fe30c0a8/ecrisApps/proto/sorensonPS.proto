Terminator = CR;

############################
# Common Command Subsystem #
############################

setCommon {
	out "\$1";
}

getCommon {
	out "\$1";
	in "%d";
}

setCommand {
	out "\$1 %d";
}

#################################
# Source SCPI Command Subsystem #
#################################

# Sets the output current in amps(default) or in milliamps.
setSourceCurrent{
	out "SOUR:CURR %f";
}

# Returns the output current in amps or in milliamps.
getSourceCurrent {
	out "SOUR:CURR?";
	in "%f";
}

# Sets an upper soft limit on the programmed output current for the supply.
setSourceCurrentLimit {
	out "SOUR:CURR:LIM %f";
}

# Returns the upper soft limit on the programmed output current for the supply.
getSourceCurrentLimit {
	out "SOUR:CURR:LIM?";
	in "%f";
}

# Sets the output current to ramp from the present value to the specified value
# (first argument) in the specified time(second argument).
setSourceCurrentRamp {
	out "SOUR:CURR:RAMP %s";
}

# Returns 1 if the ramp is in progress, and 0 if the ramp is completed.
getSourceCurrentRamp {
	out "SOUR:CURR:RAMP?";
	in "%d";
}

# Aborts ramping and clears trigger mode.
setSourceCurrentRampAbort {
	out "SOUR:CURR:RAMP:ABOR";
}

# Return the ramping status of all channels.
getSourceCurrentRampAll {
	out "SOUR:CURR:RAMP:ALL?";
}

# Sets the value of the output current to ramp to be implemented when the hardware trigger is received.
setSourceCurrentRampHTrigger {
	out "SOUR:CURR:RAMP:HTRIG %f";
}

# Retruns the value of the output current to ramp to be implemented when the hardware trigger is received.
getSourceCurrentRampHTrigger {
	out "SOUR:CURR:RAMP:HTRIG?";
	in "%f";
}

# Sets the output current to ramp from the present value to the specified value
# (first argument) in the specified time (second argument) upon the trigger command.
setSourceCurrentRampTrigger {
	out "SOUR:CURR:RAMP:TRIG %f %f";
}

# Returns the value that the output current is to ramp to (first value) and the time that is to ramp
# (second value) upon the trigger command.
getSourceCurrentRampTrigger {
	out "SOUR:CURR:RAMP:TRIG?";
	in "%f";
}

# Sets the output voltage to the values stored by the SOUR:CURR:TRIG:AMPL command.
setSourceCurrentTrigger {
	out "SOUR:CURR:TRIG";
}

# Returns the current level that will be set upon receipt of the trigger.
getSourceCurrentTrigger {
	out "SOUR:CURR:TRIG?";
	in "%f";
}

# Clears the value stored by the SOUR:CURR:TRIG:AMPL command.
setSourceCurrentTriggerClear {
	out "SOUR:CURR:TRIG:CLE";
}

# Stores the value of the output current to be set when the SOUR:CURR:TRIG command is sent.
setSourceCurrentTriggerAmplitude {
	out "SOUR:CURR:TRIG:AMPL %f";
}

# Returns the stored value of the output current to be set when the SOUR:CURR:TRIG command is sent.
getSourceCurrentTriggerAmplitude {
	out "SOUR:CURR:TRIG:AMPL?";
	in "%f";
}

# SGI only
setSourcePower {
	out "SOUR:POW %f";
}

# SGI only
getSourcePower {
	out "SOUR:POW?";
	in "%s";
}

# Returns the integer value 1(timeout since last query) or 0(no timeout) of the timeout status of the channel.
getSourceTimeout {
	out "SOUR:TIM?";
	in "%d";
}

# Sets the output voltage of the supply in volts(default) or in millivolts.
setSourceVoltage {
	out "SOUR:VOLT %f";
}

# Returns the output voltage of the supply in volts or in millivolts.
getSourceVoltage {
	out "SOUR:VOLT?";
	in "%f";
}

# Sets the upper soft limit on the programmed output voltage.
setSourceVoltageLimit {
	out "SOUR:VOLT:LIM %f";
}

# Returns the upper soft limit set on the programmed output voltage.
getSourceVoltageLimit {
	out "SOUR:VOLT:LIM?";
	in "%f";
}

# Sets the overvoltage protection trip point in volts(default) or in millivolts.
setSourceVoltageProtection {
	out "SOUR:VOLT:PROT %f";
}

# Returns the set overvoltage protection trip point in volts(default) or in millivolts.
getSourceVoltageProtection {
	out "SOUR:VOLT:PROT?";
	in "%f";
}

# Returns 1(Tripped) or 0(Untripped) state of the overvoltage protection Circuit.
getSourceVoltageProtectionTripped {
	out "SOUR:VOLT:PROT:TRIP?";
	in "%d";
}

# Returns the state 1(ON) or 0(OFF) if the overvoltage protection is enabled.
getSourceVoltageProtectionState {
	out "SOUR:VOLT:PROT:STAT?";
	in "%d";
}

# Clears the overvoltage protection Circuit.
setSourceVoltageProtectionClear {
	out "SOUR:VOLT:PROT:CLE"
}

# Sets the output voltage to ramp from the present value to the specified value(first argument)
# in the specified time(second argument).
setSourceVoltageRamp {
	out "SOUR:VOLT:RAMP %s";
}

# Returns 1 if the ramp is in progress, and 0 if the ramp is completed.
getSourceVoltageRamp {
	out "SOUR:VOLT:RAMP?";
	in "%d";
}

# Aborts ramping and clears trigger mode.
setSourceVoltageRampAbort {
	out "SOUR:VOLT:RAMP:ABOR";
}

# Returns the ramping status of all channels.
getSourceVoltageRampAll {
	out "SOUR:VOLT:RAMP:ALL?";
	in "%f";
}

# Sets the value of the output voltage ramp to be implemented when the hardware trigger is received.
setSourceVoltageRampHTrigger {
	out "SOUR:VOLT:RAMP:HTRIG %f";
}

# Returns the value of the output voltage ramp to be implemented when the hardware trigger is received.
getSourceVoltageRampHTrigger {
	out "SOUR:VOLT:RAMP:HTRIG?";
	in "%f";
}

# Sets the output voltage to the values stored by the SOUR:VOLT:TRIG:AMPL command.
setSourceVoltageTrigger {
	out "SOUR:VOLT:TRIG";
}

# Returns the voltage level that will be set upon receipt of the trigger.
getSourceVoltageTrigger {
	out "SOUR:VOLT:TRIG?";
	in "%f";
}

# Clears the value stored by the SOUR:VOLT:TRIG:AMPL command.
setSourceVoltageTriggerClear {
	out "SOUR:VOLT:TRIG:CLE";
}

# Stores the value of the output current to be et when the SOUR:VOLT:TRIG command is sent.
setSourceVoltageTriggerAmplitude {
	out "SOUR:VOLT:TRIG:AMPL %f";
}

# Returns the stored value of the output current to be set when the SOUR:VOLT:TRIG command is sent.
getSourceVoltageTriggerAmplitude {
	out "SOUR:VOLT:TRIG:AMPL?";
	in "%f";
}

##################################
# Measure SCPI Command Subsystem #
##################################

# Measure current subsystem.
setMeasureCurrent {
	out "MEAS:CURR";
}

# Returns the floating point value of the DC output current in amps.
getMeasureCurrent {
	out "MEAS:CURR?";
	in "%f";
}

# Enter a value of 1 to 5 to set the number of readings to average together when returning the current
# value from the MEAS:CURR? command. This function reduces noise in the readback readings.
# The (default) value of 1 provides the fastest response time, but the noisiest readings.
setMeasureCurrentAverage {
	out "MEAS:CURR:AVE %d";
}

# Returns the number 1 to 5 to indicate the last set number of readings to average together when taking
# a current reading.
getMeasureCurrentAverage {
	out "MEAS:CURR:AVE?";
	in "%d";
}

# SGI only
getMeasurePower {
	out "MEAS:POW?";
	in "%s";
}

# Measure Voltage subsystem.
setMeasureVoltage {
	out "MEAS:VOLT";
}

# Returns the floating poing value of the DC output voltage in volts.
getMeasureVoltage {
	out "MEAS:VOLT?";
	in "%f";
}

# Enter a value of 1 to 5 to set the number of readings to average together when returning the voltage
# value from the MEAS:VOLT? command. This function reduces noise in the readback readings.
# The (default) value of 1 provides the fastest response time, but the noisiest readings.
setMeasureVoltageAverage {
	out "MEAS:VOLT:AVE %d";
}

# Returns the number 1 to 5 to indicate the last set number of readings to average together when taking
# a voltage reading.
getMeasureVoltageAverage {
	out "MEAS:VOLT:AVE?";
	in "%d";
}

#################################
# Output SCPI Command Subsystem #
#################################

# Sets the rear panel isolation relay control signal ON or OFF. Valid arguments are 1/ON or 0/OFF.
setOutputIsolation {
	out "OUTP:ISOL %d";
}

# Returns the state of the rear panel isolation relay control signal: 1=ON 0=OFF.
getOutputIsolation {
	out "OUTP:ISOL?";
	in "%d";
}

# Changes the state of the polarity relay. This command requires that the isolation relay be open
# beforehand. If the isolation relay is closed when this command is attempted, the state of the polarity
# relay will not change, and an error message will be generated.
setOutputPolarity {
	out "OUTP:POL %d";
}

# Returns the state of the polarity relay: <NORM/0/OFF | INV/1/ON>
getOutputPolarity {
	out "OUTP:POL?";
	in "%d";
}

# Sets the programmable time delay executed by the supply before reporting output protection conditions
# after a new output voltage or current is specified. Functional granularity of +/-0.5 seconds.
setOutputProtectionDelay {
	out "OUTP:PROT:DEL %f";
}

# Returns the time delay to be executed by the supply.
getOutputProtectionDelay {
	out "OUTP:PROT:DEL?";
	in "%f";
}

# Sets the foldback(program down) mode of the supply. Valid arguments are 0(OFF or do nothing, do not
# program down to zero), 1(program down to zero upon entering constant-voltage mode), or 2(program down
# to zero upon entering constant-current mode).
setOutputProtectionFold {
	out "OUTP:PROT:FOLD %d";
}

# Returns the set foldback(program down) mode of the supply.
# 0 = OFF; will not program down.
# 1 = will program down to zero upon entering constant-voltage mode.
# 2 = will program down to zero upon entering constant-current mode.
getOutputProtectionFold {
	out "OUTP:PROT:FOLD?";
	in "%d";
}

# Sets the sense relay signal open or close. Valid arguments are 1/ON or 0/OFF.
setOutputSense {
	out "OUTP:SENS %d";
}

# Returns the setting of the sense relay signal: 1=ON 0=OFF.
getOutputSense {
	out "OUTP:SENS?";
	in "%d";
}

# Sets the output to zero or the programmed value; opens or closes the isolation relay.
# Valid arguments are 1/ON or 0/OFF. *RST state value is ON.
setOutputState {
	out "OUTP:STAT %d";
}

# Returns the state of the output; 1=ON 0=OFF.
getOutputState {
	out "OUTP:STAT?";
	in "%d";
}

# Returns the integer value 1(Tripped) or 0(Untripped) state of the output.
getOutputTripped {
	out "OUTP:TRIP?";
	in "%d";
}

#################################
# Status SCPI Command Subsystem #
#################################

# Returns the integer value of the Operation Condition Register. The query is supported but will always
# return "0" indicating operational condition.
getStatusOperationCondition {
	out "STAT:OPER:COND?";
	in "%d";
}

# Sets the enable mask of the Operation Event Register allowing true conditions to be reported in the
# summary bit of the Operation Condition Register. Values are written and queried but have no effect
# on the Operation Condition Register.
setStatusOperationEnable {
	out "STAT:OPER:ENAB %d";
}

# Returns the value of the current mask if the Operation Event Register.
getStatusOperationEnable {
        out "STAT:OPER:ENAB?";
	in "%d";
}

# Returns the integer value of the Operation Event Register. This query is supported but always returns
# a value of "0" indicating operational condition.
getStatusOperationEvent {
	out "STAT:OPER:EVEN?";
	in "%d";
}

# Sets the enable mask of the Operation Event Register and the Questionable Event Register to all 1's
setStatusPreset {
	out "STAT:PRES";
}

# Returns the integer value of the Protection Condition Register. Used to read the status of the power
# hardware. See section 6.2.3 for a detailed table of the various bits that make up this register.
getStatusProtectionCondition {
	out "STAT:PROT:COND?";
	in "%d";
}

# Sets the enable mask of the Protection Event Register, which allows true conditions to be reported in
# the summary bit of the Protection Condition Register.
setStatusProtectionEnable {
	out "STAT:PROT:ENAB %d";
}

# Returns the value of the current mask of the Protection Event Register.
getStatusProtectionEnable {
	out "STAT:PROT:ENAB?";
	in "%d";
}

# Returns the integer value of the Protection Event Register.
getStatusProtectionEvent {
	out "STAT:PROT:EVEN?";
	in "%d";
}

# This command provides a measn for selecting which fault bits from the protection event register(also
# called the fault register and can be read using the STAT:PROT:EVEN? command) are able to set the
# protection event flag bit in the SCPI status byte(readable using the *STB? command). It defaults to
# value 255 at power-on time, and never changes unless intentionally programmed to a new value.
setStatusProtectionSelect {
	out "STAT:PROT:SELE %d";	
}

# Returns the last selection value programmed.
getStatusProtectionSelect {
	out "STAT:PROT:SELE?";
	in "%d";
}

# Returns the integer value of the Questionable Condition Register. The query is supported but will
# always return "0" indicating operational condition.
getStatusQuestionableCondition {
	out "STAT:QUES:COND?";
	in "%d";
}

# Sets the enable mask of the Questionable Event Register allowing true conditions to be reported in the
# summary bit of the Questionable Condition Register. Values are written and queried but have no effect
# on the Questionable Condition Register.
setStatusQuestionableEnable {
        out "STAT:QUES:ENAB %d";
}

# Retruns the value of the current mask of the Questionable Event Register.
getStatusQuestionableEnable {
        out "STAT:QUES:ENAB?";
        in "%d";
}

# Returns the integer value of the Questionable Event Register. This query is supported but always
# returns a value of "0", indicating operational condition.
getStatusQuestionableEvent {
        out "STAT:QUES:EVEN?";
        in "%d";
}

#################################
# System SCPI Command Subsystem #
#################################

#################################
# HTrigger SCPI Command Subsystem #
#################################


#################################
# Trigger SCPI Command Subsystem #
#################################

