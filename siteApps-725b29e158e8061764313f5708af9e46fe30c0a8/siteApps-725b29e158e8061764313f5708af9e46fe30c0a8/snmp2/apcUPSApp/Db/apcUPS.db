
#***********************************************************************
# APC UPS
#***********************************************************************
# UPS Info
## Model
record(snmpstr, "${UPS}:Model") {
  field(DESC, "UPS Model name")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsBasicIdentModel.0")
}

## Name
record(snmpstr, "${UPS}:Name") {
  field(DESC, "UPS Name")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsBasicIdentName.0")
}

## Last Replace Date
### expressed in mm/dd/yy formats
record(snmpstr, "${UPS}:LastReplaceDate") {
  field(DESC, "Battery Last Replace Date")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsBasicBatteryLastReplaceDate.0")
}

## Temprature
### expressed in Celsius
record(snmp, "${UPS}:Temperature") {
  field(DESC, "current internal UPS temperature")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsHighPrecBatteryTemperature.0")
}

## UPS stauts
### on(1), off(2)
record(snmp, "${UPS}:UPS_Status") {
  field(DESC, "UPS Status")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}dipSwitchStatus.1")
}



## Basic Output Status
### unknown(1), onLine(2), onBattery(3), onSmartBoost(4), timedSleeping(5), softwareBypass(6), off(7), rebooting(8), switchedBypass(9), hardwareFailureBypass(10), sleepingUntilPowerReturn(11), onSmartTrim(12), ecoMode(13), hotStandby(14), onBatteryTest(15), emergencyStaticBypass(16), staticBypassStandby(17), powerSavingMode(18), spotMode(19), eConversion(20)
### If the UPS is unable to determine the state of the UPS this variable is set to unknown(1).
record(snmp, "${UPS}:Output_Status") {
  field(DESC, "Current state of the UPS")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsBasicOutputStatus.0")
}


# Battery
## Status
### unknown(1), batteryNormal(2), batteryLow(3), batteryInFaultCondition(4)
record(snmp, "${UPS}:Battary_Status") {
  field(DESC, "Status of the UPS batteries")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsBasicBatteryStatus.0")
}


## Capacity
### expressed in percent of full capacity
record(snmp, "${UPS}:Capacity") {
  field(DESC, "remaining battery capacity")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsHighPrecBatteryCapacity.0")
}

## Battery Voltage
### expressed in Volts
record(snmp, "${UPS}:BatteryVoltage") {
  field(DESC, "Actual Battery Bus Voltage")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsHighPrecBatteryActualVoltage.0")
}

## Battery Replace Indicator
### noBatteryNeedsReplacing(1), batteryNeedsReplacing(2)
record(snmp, "${UPS}:BatteryIndicator") {
  field(DESC, "Battay Replace Indicator")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsAdvBatteryReplaceIndicator.0")
}

# Power
## Frequency
### expressed in Hz
record(snmp, "${UPS}:Frequency") {
  field(DESC, "Current Output Frequency")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsHighPrecOutputFrequency.0")
}

## Input Line Voltage
### expressed in VAC
record(snmp, "${UPS}:Input_Voltage") {
  field(DESC, "Current utility line voltage")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsHighPrecInputLineVoltage.0")
}


## Output Voltage
### expressed in VAC
record(snmp, "${UPS}:Output_Voltage") {
  field(DESC, "Output Voltage of the UPS")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsHighPrecOutputVoltage.0")
}

# Load
## Load Power
### expressed in percent
record(snmp, "${UPS}:Load_Power") {
  field(DESC, "Currunt UPS load")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsHighPrecOutputLoad.0")
}

## Load Current
### expressed in Watts
record(snmp, "${UPS}:Load_Crrent") {
  field(DESC, "Currunt amperes drawn by the load")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsHighPrecOutputCurrent.0")
}


# Devices
record(snmp, "${UPS}:Num_Pluggeddevices") {
  field(DESC, "Number of plugged devices")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsBasicConfigNumDevices.0")
}

# Set UPS
## Turn On
### noTurnOnUPS(1) : always be returned when the variable is read.
### turnOnUPS(2) : turned on immediately.
### turnOnUPSSyncGroup(3) : Synchronized Turn On of all active Group members regardless of their current AC output status.

record(snmp, "${UPS}:UPSPO_On_R") {
  field(DESC, "Turned on UPS")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsAdvControlTurnOnUPS.0")
}

record(snmp, "${UPS}:UPSPO_On_W") {
    field(DESC, "Turned on UPS")
    field(DTYP, "SNMP Write")
    field(SCAN, "5 second")
    field(VERS, "${V3}")
    field(AUTH, "${AUTH_P}")
    field(PRIV, "${PRIV_P}")
    field(HOST, "${HOST}")
    field(COMM, "${USER}")
    field(OIDS, "${PO}upsAdvControlTurnOnUPS.0")
}

# 
record(snmpstr, "${UPS}:flag_Status") {
    field(DESC, "Turned on UPS")
    field(DTYP, "SNMP Read")
    field(SCAN, "5 second")
    field(VERS, "${V2C}")
    field(HOST, "${HOST}")
    field(COMM, "${COM}")
    field(OIDS, "${PO}upsBasicStateOutputState.0")
}


## Turn Off
### noTurnUpsOff(1) : always be returned when the variable is read.
### turnUpsOff(2) : Shut off the UPS.
### turnUpsOffGracefully(3) : shut off after a delay period.
### turnUpsSyncGroupOff(4) : Synchronized Turn Off of all active Group members regardless of their current AC output status.
### turnUpsSyncGroupOffAfterDelay(5) : Synchronized Turn Off After Delay of all active Group members regardless of their current AC output status.
### turnUpsSyncGroupOffGracefully(6) : Synchronized Turn Off Gracefully of all active Group members regardless of their current AC output status.

record(snmp, "${UPS}:UPSPO_Off_R") {
  field(DESC, "Turned off UPS")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsAdvControlUpsOff.0")
}

record(snmp, "${UPS}:UPSPO_Off_W") {
    field(DESC, "Turned off UPS")
    field(DTYP, "SNMP Write")
    field(SCAN, "5 second")
    field(VERS, "${V3}")
    field(AUTH, "${AUTH_P}")
    field(PRIV, "${PRIV_P}")
    field(HOST, "${HOST}")
    field(COMM, "${USER}")
    field(OIDS, "${PO}upsAdvControlUpsOff.0")
}

## Reboot
### noRebootShutdownUps(1) : always be returned when the variable is read.
### rebootShutdownUps(2) : UPS to shut off and turn back on (as long as good AC input power is available, otherwise the UPS will remain off until good AC input power is available).
### rebootShutdownUpsGracefully(3) : UPS to shut off after a delay period and then turn back on.
### rebootShutdownSyncGroupUps(4) : Synchronized Reboot of all active Group members regardless of their current AC output status.
### rebootShutdownSyncGroupUpsGracefully(5) : Synchronized Reboot of all active Group members regardless of their current AC output status.

record(snmp, "${UPS}:UPSPO_Reboot_R") {
  field(DESC, "Reboot UPS")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsAdvControlRebootShutdownUps.0")
}

record(snmp, "${UPS}:UPSPO_Reboot_W") {
    field(DESC, "Reboot UPS")
    field(DTYP, "SNMP Write")
    field(SCAN, "5 second")
    field(VERS, "${V3}")
    field(AUTH, "${AUTH_P}")
    field(PRIV, "${PRIV_P}")
    field(HOST, "${HOST}")
    field(COMM, "${USER}")
    field(OIDS, "${PO}upsAdvControlRebootShutdownUps.0")
}

## Sleep
### noPutUpsToSleep(1) : always be returned when the variable is read.
### putUpsToSleep(2) :  UPS to go to sleep for the time specified by upsAdvConfigUpsSleepTime
### putUpsToSleepGracefully(3) : UPS to go to sleep for the time specified by upsAdvConfigUpsSleepTime after a delay period.
### putUpsSyncGroupToSleep(4) : Synchronized Sleep of all active Group members regardless of their current AC output status.
### putUpsSyncGroupToSleepGracefully(5) : Synchronized Sleep Gracefully of all active Group members regardless of their current AC output status.

record(snmp, "${UPS}:UPSPO_Sleep_R") {
  field(DESC, "Sleep UPS")
  field(DTYP, "SNMP Read")
  field(SCAN, "5 second")
  field(VERS, "${V2C}")
  field(HOST, "${HOST}")
  field(COMM, "${COM}")
  field(OIDS, "${PO}upsAdvControlUpsSleep.0")
}

record(snmp, "${UPS}:UPSPO_Sleep_W") {
    field(DESC, "Sleep UPS")
    field(DTYP, "SNMP Write")
    field(SCAN, "5 second")
    field(VERS, "${V3}")
    field(AUTH, "${AUTH_P}")
    field(PRIV, "${PRIV_P}")
    field(HOST, "${HOST}")
    field(COMM, "${USER}")
    field(OIDS, "${PO}upsAdvControlUpsSleep.0")
}


record(timestamp, "${S}:TIMESTAMP") {
  field(TST, "YY/MM/DD HH:MM:SS")
  field(SCAN, "1 second")
}




## Temprature
# record(snmp, "${UPS}:") {
#   field(DESC, "")
#   field(DTYP, "SNMP Read")
#   field(SCAN, "5 second")
#   field(VERS, "${V2C}")
#   field(HOST, "${HOST}")
#   field(COMM, "${COM}")
#   field(OIDS, "${PO}")
# }

## Temprature
# record(snmp, "${UPS}:") {
#   field(DESC, "")
#   field(DTYP, "SNMP Read")
#   field(SCAN, "5 second")
#   field(VERS, "${V2C}")
#   field(HOST, "${HOST}")
#   field(COMM, "${COM}")
#   field(OIDS, "${PO}")
# }


