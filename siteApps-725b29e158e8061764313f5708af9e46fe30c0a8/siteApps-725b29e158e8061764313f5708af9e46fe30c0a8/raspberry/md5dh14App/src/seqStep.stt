program seqStep

option +r;

int spd;
double speed;
int jog;
int current;
int pwm;
int dir; /* 0: CW, (-) 1: CCW (+) */
int stop;
int reset;
int relMove;
int absMove;
int relPulse;
int absPulse;
int jogCW;
int jogCCW;
int max;
int min;
int maxFlag;
int minFlag;

assign spd to "{SYS}-{SUBSYS}:{DEV}:SEQ:Sset";
assign speed to "{SYS}-{SUBSYS}:{DEV}:SEQ:Scvt";
assign current to "{SYS}-{SUBSYS}:{DEV}:SEQ:Pcur";
assign pwm to "{SYS}-{SUBSYS}:{DEV}:PWM";
assign dir to "{SYS}-{SUBSYS}:{DEV}:DIR";
assign stop to "{SYS}-{SUBSYS}:{DEV}:SEQ:STOP";
assign reset to "{SYS}-{SUBSYS}:{DEV}:SEQ:RST";
assign relMove to "{SYS}-{SUBSYS}:{DEV}:SEQ:Mrel";
assign absMove to "{SYS}-{SUBSYS}:{DEV}:SEQ:Mabs";
assign relPulse to "{SYS}-{SUBSYS}:{DEV}:SEQ:Prel";
assign absPulse to "{SYS}-{SUBSYS}:{DEV}:SEQ:Pabs";

assign jogCW to "{SYS}-{SUBSYS}:{DEV}:SEQ:JCW";
assign jogCCW to "{SYS}-{SUBSYS}:{DEV}:SEQ:JCCW";

assign max to "{SYS}-{SUBSYS}:{DEV}:SEQ:Pmax";
assign min to "{SYS}-{SUBSYS}:{DEV}:SEQ:Pmin";
assign maxFlag to "{SYS}-{SUBSYS}:{DEV}:SEQ:Fmax";
assign minFlag to "{SYS}-{SUBSYS}:{DEV}:SEQ:Fmin";

monitor reset;
monitor stop;
monitor relMove;
monitor absMove;

monitor jogCW;
monitor jogCCW;

int pulse;
int count;
int count_sign;
int limitCheck;

ss ssMain
{
  state init
  {
    when(delay(0.1))
    {
      pulse = 0;
      pwm = 0;
      current = 0;
      count = 0;
      count_sign = 0;
      relPulse = 0;
      absPulse = 0;

      pvPut(current);

      printf("Step Motor Sequence Start\n");

    } state Stop
  }

  state High
  {
    when(pulse == count || stop == 1 || maxFlag == 1 || minFlag == 1)
    {
      pvPut(maxFlag);
      pvPut(minFlag);
      
      pvPut(current);

      relMove = 0;
      pvPut(relMove);
 
      absMove = 0;
      pvPut(absMove);

      count = 0;

    } state Stop

    when(delay(speed))
    {
      pwm = 1;
      pvPut(pwm);

    } state Low
  }
  
  state Low
  {
    when(delay(speed))
    {
      pwm = 0;
      pvPut(pwm);

      count++;

      current += count_sign;

      if(current >= max) maxFlag = 1;      
      else if(current <= min) minFlag = 1;      

      if(count % 200 == 0) pvPut(current);

    } state High
  }

  state Stop
  {
    when(relMove == 1)
    {
      pvGet(speed);
      pvGet(relPulse);
      pvGet(min);
      pvGet(max);

      if(relPulse < 0) 
      {
        count_sign = -1;
        dir = 0;
      }
      else
      {
        count_sign = 1;
        dir = 1;
      }

      pulse = count_sign * relPulse;
      pvPut(dir);

      limitCheck = current + count_sign;

      if(limitCheck < max)
      {
        maxFlag = 0;
        pvPut(maxFlag);
      }

      if(limitCheck > min)
      {
        minFlag = 0;
        pvPut(minFlag);
      }

    } state High

    when(absMove == 1)
    {
      pvGet(speed);
      pvGet(absPulse);
      pvGet(min);
      pvGet(max);
      
      if(absPulse > current)
      {
        /* CCW (+) */
        count_sign = 1;
        dir = 1;
      }
      else if(absPulse < current)
      {
        /* CW (-) */
        count_sign = -1;
        dir = 0;
      }
      else
      {
        count_sign = 0;
        pulse = count;
      }

      pulse = count_sign * (absPulse - current);
      pvPut(dir);

      limitCheck = current + count_sign;

      if(limitCheck < max)
      {
        maxFlag = 0;
        pvPut(maxFlag);
      }

      if(limitCheck > min)
      {
        minFlag = 0;
        pvPut(minFlag);
      }

    } state High

    when(jogCW == 1 && minFlag == 0)
    { 
      pvGet(speed);
      pvGet(min);
      pvGet(max);

      dir = 0;
      count_sign = -1;
      pvPut(dir);

      limitCheck = current;

      maxFlag = 0;
      pvPut(maxFlag);

      if(limitCheck > min)
      {
        minFlag = 0;
        pvPut(minFlag);
      }


    } state JogHigh

    when(jogCCW == 1 && maxFlag == 0)
    { 
      pvGet(speed);
      pvGet(min);
      pvGet(max);

      dir = 1;
      count_sign = 1;
      pvPut(dir);

      limitCheck = current;

      if(limitCheck < max)
      {
        maxFlag = 0;
        pvPut(maxFlag);
      }

      minFlag = 0;
      pvPut(minFlag);

    } state JogHigh

    when(reset == 1)
    {
      maxFlag = 0;
      minFlag = 0;

      pvPut(maxFlag);
      pvPut(minFlag);

      current = 0;
      pvPut(current);

    } state Stop
  }

  state JogHigh
  {
    when((jogCW | jogCCW) == 0 || maxFlag == 1 || minFlag == 1)
    {
      pvPut(maxFlag);
      pvPut(minFlag);

      pvPut(current);

      count = 0;

    } state Stop

    when(delay(speed))
    {
      pwm = 1;
      pvPut(pwm);

    } state JogLow
  }
  
  state JogLow
  {
    when(delay(speed))
    {
      pwm = 0;
      pvPut(pwm);

      count++;

      current += count_sign;

      if(current >= max) maxFlag = 1;
      else if(current <= min) minFlag = 1;

      if(count % 200 == 0) pvPut(current);

    } state JogHigh
  }
}
