#
# EPICS DB with STREAM device for Keithley 6514 System Electrometer
# based on StreamSCPI template, and so many other EPICS db files
#
#
# Friday, February 13 17:02:38 KST 2015, jhlee
#
# Short and long form of identification string
#
record(stringin, "$(SYS)-$(SUBSYS):$(DEV):FwVer") 
{
    field(DESC, "SCPI identification string")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto getIDN(199) $(PORT) $(A)")
    field(PINI, "YES")
}

# RST
# 1. Returns Model 6514 to the RST default conditions
# 2. Cancels all pending commands
# 3. Cancels response to any previously received *OPC and *OPC? commands
#
record(bo, "$(SYS)-$(SUBSYS):$(DEV):Rst") 
{
    field(DESC, "SCPI Reset")
    field(DTYP, "stream")
    field( OUT, "@devkeithley6514.proto cmd(*RST) $(PORT) $(A)")
    field(PINI, "YES")
}

record(bo, "$(SYS)-$(SUBSYS):$(DEV):Clr") 
{
    field(DESC, "SCPI Clear status")
    field(DTYP, "stream")
    field( OUT, "@devkeithley6514.proto cmd(*CLS) $(PORT) $(A)")
}

record(longin, "$(SYS)-$(SUBSYS):$(DEV):GetSTB") 
{
    field(DESC, "SCPI get status byte")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto getD(*STB) $(PORT) $(A)")
}

record(longin, "$(SYS)-$(SUBSYS):$(DEV):GetESR") 
{
    field(DESC, "SCPI get event status")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto getD(*ESR) $(PORT) $(A)")
}

record(longout, "$(SYS)-$(SUBSYS):$(DEV):SetESE") 
{
    field(DESC, "SCPI enable event status")
    field(DTYP, "stream")
    field( OUT, "@devkeithley6514.proto setD(*ESE) $(PORT) $(A)")
}

record(longin, "$(SYS)-$(SUBSYS):$(DEV):GetESE") 
{
    field(DESC, "SCPI enabled event status")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto getD(*ESE) $(PORT) $(A)")
}

record(longout, "$(SYS)-$(SUBSYS):$(DEV):SetSRE") 
{
    field(DESC, "SCPI enable service requests")
    field(DTYP, "stream")
    field( OUT, "@devkeithley6514.proto setD(*SRE) $(PORT) $(A)")
}

record(longin, "$(SYS)-$(SUBSYS):$(DEV):GetSRE") 
{
    field(DESC, "Enabled service requests")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto getD(*SRE) $(PORT) $(A)")
}

record(longin, "$(SYS)-$(SUBSYS):$(DEV):GetOPC") 
{
    field(DESC, "Output completion status")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto getD(*OPC) $(PORT) $(A)")
}

#
# Zero Check
# Default : ON on Manual 16-8, Table 16-3
#
record(bo, "$(SYS)-$(SUBSYS):$(DEV):SetZeroCheck") 
{
    field(DESC, "Disable/Enable zero check")
    field(DTYP, "stream")
    field( OUT, "@devkeithley6514.proto setD(SYST:ZCH) $(PORT) $(A)")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(PINI, "YES")
    field( VAL, "1")
    field(FLNK, "$(SYS)-$(SUBSYS):$(DEV):GetZeroCheck")
}

record(bi, "$(SYS)-$(SUBSYS):$(DEV):GetZeroCheck") 
{
    field(DESC, "Readback zero check status")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto getD(SYST:ZCH) $(PORT) $(A)")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

#
# Zero Correction
# Default : OFF on Manual 16-8 Table 16-3
#
record(bo, "$(SYS)-$(SUBSYS):$(DEV):SetZeroCorrect") 
{
    field(DESC, "Enable or disable zero correct")
    field(DTYP, "stream")
    field( OUT, "@devkeithley6514.proto setD(SYST:ZCOR) $(PORT) $(A)")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field( VAL, "0")
    field(PINI, "YES")
    field(FLNK, "$(SYS)-$(SUBSYS):$(DEV):GetZeroCorrect")
}

record(bi, "$(SYS)-$(SUBSYS):$(DEV):GetZeroCorrect") 
{
    field(DESC, "Readback zero correct")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto getD(SYST:ZCOR) $(PORT) $(A)")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

#
# DISPlay:ENABle <b>
# With front panel circuitry turned off, the instrument operates at higher speed. 
# While disabled, the display is frozen and all front panel controls (execpt LOCAL) 
# are disabled. Normal display operations can be resumed by using :ENABle to enable 
# the display, pressing the LOCAL key, or cycling power.
#
record(bo, "$(SYS)-$(SUBSYS):$(DEV):FPDisplayEnable") 
{
    field(DESC, "Enable or disable front panel display")
    field(DTYP, "stream")
    field( OUT, "@devkeithley6514.proto setD(DISP:ENAB) $(PORT) $(A)")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(FLNK, "$(SYS)-$(SUBSYS):$(DEV):FPDisplayRB")
}

record(bi, "$(SYS)-$(SUBSYS):$(DEV):FPDisplayRB") 
{
    field(DESC, "Readback FP display status")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto getD(DISP:ENAB) $(PORT) $(A)")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(PINI, "YES")
}

#  
# Somehow, strange behaviors are seen in combinations of the following commands as
# caput ECR11-Diag:FC01:Remote Local
# caput ECR11-Diag:FC01:Remote Remote
# caput ECR11-Diag:FC01:RWLockSet On
# 
# The Error code -113 is shown in FP from time to time, but 
# I cannot reproduce this error message.
# 
# Leave them for future studies.
#
# Wednesday, February 11 16:41:49 KST 2015, jhlee
#
# SYSTem:LOCal
# SYSTem:REMote
# SYSTem:RWLock
#
record(bo, "$(SYS)-$(SUBSYS):$(DEV):SetLocalRemote") 
{
    field(DESC, "Set into local/remote mode")
    field(DTYP, "stream")
    field( OUT, "@devkeithley6514.proto setLocRem $(PORT) $(A)")
    field(ZNAM, "Local")
    field(ONAM, "Remote")
    field(PINI, "YES")
    field( VAL, "1")
}

#
# The command has no ? option, and it says
# Enable or disable local lockout, but I cannot disable local lockout by sending
# SYST:RWL in both EPICS IOC and minicom. To disable local lockout is to send the 
# following :
# caput ECR11-Diag:FC01:Remote Local
# 
# Wednesday, February 11 16:44:25 KST 2015, jhlee
record(bo, "$(SYS)-$(SUBSYS):$(DEV):RWLockEnable") 
{
    field(DESC, "Enable/disable local lockout")
    field(DTYP, "stream")
    field( OUT, "@devkeithley6514.proto cmd(SYST:RWL) $(PORT) $(A)")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(PINI, "YES")
}

#
# CurrentRange Auto
#
record(bo, "$(SYS)-$(SUBSYS):$(DEV):CurrAutoRangeEnable") 
{
    field(DESC, "Enable/disable current auto range")
    field(DTYP, "stream")
    field( OUT, "@devkeithley6514.proto setD(CURR:RANG:AUTO) $(PORT) $(A)")
    field(ZNAM, "Fixed")
    field(ONAM, "Auto")
    field( VAL, "1")
    field(PINI, "YES")
    field(FLNK, "$(SYS)-$(SUBSYS):$(DEV):CurrAutoRangeRB")
}

record(bi, "$(SYS)-$(SUBSYS):$(DEV):CurrAutoRangeRB") 
{
    field(DESC, "Readback the current auto range")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto getD(CURR:RANG:AUTO) $(PORT) $(A)")
    field(ZNAM, "Fixed")
    field(ONAM, "Auto")
}

#
#
# AMPS, RANGE 
#
# idx, input, proto, current range
#
# 0, 11, 2E-11,  20 pA
# 1, 10, 2E-10, 200 pA 
# 2,  9, 2E- 9,   2 nA
# 3,  8, 2E- 8,  20 nA 
# 4,  7, 2E- 7, 200 nA
# 5,  6, 2E- 6,   2 uA
# 6,  5, 2E- 5,  20 uA 
# 7,  4, 2E- 4, 200 uA
# 8,  3, 2E- 3,   2 mA
# 9,  2, 2E- 2,  20 mA 
#
# caput ECR11-Diag:FC01:CurrentRangSet 0
# caput ECR11-Diag:FC01:CurrentRangSet 6
#
# camonitor  -S ECR11-Diag:FC01:CurrentRangeRB
# ECR11-Diag:FC01:CurrentRangeRB 2015-02-11 18:37:39.408003 2 nA
# ECR11-Diag:FC01:CurrentRangeRB 2015-02-11 18:38:57.964737 2 mA 
#
# Wednesday, February 11 18:42:03 KST 2015, jhlee
#
record(mbbo, "$(SYS)-$(SUBSYS):$(DEV):SetCurrRange") 
{
    field(DESC, "Set Current fixed scale range")
    field(DTYP, "stream")
    field( OUT, "@devkeithley6514.proto setCurrentRange $(PORT) $(A)")
    field(ZRVL, "11")
    field(ZRST, "20 pA")
    field(ONVL, "10")
    field(ONST, "200 pA")
    field(TWVL, "9")
    field(TWST, "2 nA")
    field(THVL, "8")
    field(THST, "20 nA")
    field(FRVL, "7")
    field(FRST, "200 nA")
    field(FVVL, "6")
    field(FVST, "2 uA")
    field(SXVL, "5")
    field(SXST, "20 uA")
    field(SVVL, "4")
    field(SVST, "200 uA")
    field(EIVL, "3")
    field(EIST, "2 mA")
    field(NIVL, "2")
    field(NIST, "20 mA")
    field(TESV, "INVALID")
    field(ELSV, "INVALID")
    field(TVSV, "INVALID")
    field(TTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FFSV, "INVALID")
    field(UNSV, "INVALID")
    field(IVOA, "Don't drive outputs")
    field(FLNK, "$(SYS)-$(SUBSYS):$(DEV):GetCurrRangeRB")
}

record(mbbi, "$(SYS)-$(SUBSYS):$(DEV):GetCurrRangeRB") 
{
    field(DESC, "Current fixed scale range readback")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto getCurrentRange $(PORT) $(A)")
    field(ZRVL, "11")
    field(ZRST, "20 pA")
    field(ONVL, "10")
    field(ONST, "200 pA")
    field(TWVL, "9")
    field(TWST, "2 nA")
    field(THVL, "8")
    field(THST, "20 nA")
    field(FRVL, "7")
    field(FRST, "200 nA")
    field(FVVL, "6")
    field(FVST, "2 uA")
    field(SXVL, "5")
    field(SXST, "20 uA")
    field(SVVL, "4")
    field(SVST, "200 uA")
    field(EIVL, "3")
    field(EIST, "2 mA")
    field(NIVL, "2")
    field(NIST, "20 mA")
    field(TESV, "INVALID")
    field(ELSV, "INVALID")
    field(TVSV, "INVALID")
    field(TTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FFSV, "INVALID")
    field(UNSV, "INVALID")
    field(PINI, "YES")
}

#
# Set the proper function, even if we only care CURR, this function can be
# used for general purpose later. 
# Friday, February 13 17:08:33 KST 2015, jhlee
#
record(stringout, "$(SYS)-$(SUBSYS):$(DEV):SetFunction") 
{
    field(DESC, "Proper function Set")
    field(DTYP, "stream")
    field( OUT, "@devkeithley6514.proto setFunc $(PORT) $(A)")
    field(FLNK, "$(SYS)-$(SUBSYS):$(DEV):GetFunction")
}

record(stringin, "$(SYS)-$(SUBSYS):$(DEV):GetFunction") 
{
    field(DESC, "Selected function RB")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto getFunc $(PORT) $(A)")
    field(PINI, "YES")
}

#
# Reading
#
record(ai, "$(SYS)-$(SUBSYS):$(DEV):MeasureCurrent") 
{
    field(DESC, "Measure current")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto measureCurrent $(PORT) $(A)")
    field( EGU, "A")
    field(PREC, "5")
    field(SCAN, ".1 second")
}

#
# Get System Error
#
record(stringin, "$(SYS)-$(SUBSYS):$(DEV):GetSystemError") 
{
    field(DESC, "SCPI identification string")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto getError(199) $(PORT) $(A)")
    field(PINI, "YES")
}

# Power line frequency 
# 50 or 60 (Hz)
# caput ECR11-Diag:FC01:SetLineFreq 60
# caput ECR11-Diag:FC01:SetLineFreq 1
# camonitor ECR11-Diag:FC01:GetLineFreq 
# caget ECR11-Diag:FC01:GetLineFreq

record(mbbo, "$(SYS)-$(SUBSYS):$(DEV):SetLineFreq") 
{
    field(DESC, "Set Line Freq value")
    field(DTYP, "stream")
    field( OUT, "@devkeithley6514.proto setLineF $(PORT) $(A)")
    field(ZRVL, "50")
    field(ZRST, "50")
    field(ONVL, "60")
    field(ONST, "60")
    field(TWSV, "INVALID")
    field(THSV, "INVALID")
    field(FRSV, "INVALID")
    field(FVSV, "INVALID")
    field(SXSV, "INVALID")
    field(SVSV, "INVALID")
    field(EISV, "INVALID")
    field(NISV, "INVALID")
    field(TESV, "INVALID")
    field(ELSV, "INVALID")
    field(TVSV, "INVALID")
    field(TTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FFSV, "INVALID")
    field(UNSV, "INVALID")
    field(IVOA, "Don't drive outputs")
    field(FLNK, "$(SYS)-$(SUBSYS):$(DEV):GetLineFreq")
}

record(mbbi, "$(SYS)-$(SUBSYS):$(DEV):GetLineFreq") 
{
    field(DESC, "Get Line Freq value")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto getLineF $(PORT) $(A)")
    field(ZRVL, "50")
    field(ZRST, "50")
    field(ONVL, "60")
    field(ONST, "60")
    field(TWSV, "INVALID")
    field(THSV, "INVALID")
    field(FRSV, "INVALID")
    field(FVSV, "INVALID")
    field(SXSV, "INVALID")
    field(SVSV, "INVALID")
    field(EISV, "INVALID")
    field(NISV, "INVALID")
    field(TESV, "INVALID")
    field(ELSV, "INVALID")
    field(TVSV, "INVALID")
    field(TTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FFSV, "INVALID")
    field(UNSV, "INVALID")
    field(PINI, "YES")
}

#
# RATE : Integration time of the A/D converter, see 6-6 Rate
# 
# - the period of time the input signal is meausred. 
# - the integration time is specified in parameters based on
#   a number of power line cycles (NPLC), where 
#   1 PLC for 60Hz is 16.67 ms (1/60) and
#   1 PLC for 50Hz is 20    ms (1/50) 
# - the rate setting is global for all measurement functions.
# - Model 6514 is optimized for the 1 PLC to 10 PLC reading rate. 
#
# - SLOW :  6   PLC
# - MED  :  1   PLC
# - FAST :  0.1 PLC
#
#  record ao : DRVL<=LOPR<=HOPR<=DRVH.
#
record(ao, "$(SYS)-$(SUBSYS):$(DEV):SetNPLC") 
{
    field(DESC, "Set NPLC value")
    field(DTYP, "stream")
    field( OUT, "@devkeithley6514.proto setF(CURR:NPLC) $(PORT) $(A)")
    field(LOPR, "0.01")
    field(HOPR, "10")
    field(DRVL, "0.01")
    field(DRVH, "10")
    field( VAL, "1")
    field(PINI, "YES")
    field(FLNK, "$(SYS)-$(SUBSYS):$(DEV):GetNPLC")
}

record(ai, "$(SYS)-$(SUBSYS):$(DEV):GetNPLC") 
{
    field(DESC, "Get NPLC value")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto getF(CURR:NPLC) $(PORT) $(A)")
}

#
# RATE :  Integration time of the A/D converter, see 6-6 Rate
# 
# In the most case, we don't need to use SetNPLC individually.
# Here I was told, end users want to set only MED or FAST. 
# So, we need a simple PV instead of SetNPLC.
# 
# This PV can be used to set SLOW, MED, or FAST 
#  by
# caput ECR11-Diag:FC01:SetADRate {Med|Slow|Fast} 
#  or
# caput ECR11-Diag:FC01:SetADRate {0|1|2}
# 
# 0: SLOW : 6   PLC
# 1: MED  : 1   PLC
# 2: FAST : 0.1 PLC
#
# Used bits are 0,1,and 2. 
# Unused bits are 3 - 15, so I add its severity as "INVALID" 
# in order to suppress error messages in an IOC console. 
# Thursday, March  5 13:10:09 KST 2015, jhlee
#
################################################################################
record(mbbo, "$(SYS)-$(SUBSYS):$(DEV):SetADRate") 
{
    field(DESC, "Set Predefined Rate")
    field(DTYP, "stream")
    field( OUT, "@devkeithley6514.proto setADRate $(PORT) $(A)")
    field(ZRST, "Slow")
    field(ZRVL, "0")
    field(ONST, "Med")
    field(ONVL, "1")
    field(TWST, "Fast")
    field(TWVL, "2")
    field(THSV, "INVALID")
    field(FRSV, "INVALID")
    field(FVSV, "INVALID")
    field(SXSV, "INVALID")
    field(SVSV, "INVALID")
    field(EISV, "INVALID")
    field(NISV, "INVALID")
    field(TESV, "INVALID")
    field(ELSV, "INVALID")
    field(TVSV, "INVALID")
    field(TTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FFSV, "INVALID")
    field(UNSV, "INVALID")
    field(IVOA, "Don't drive outputs")
    field(FLNK, "$(SYS)-$(SUBSYS):$(DEV):GetADRate")
}

record(mbbi, "$(SYS)-$(SUBSYS):$(DEV):GetADRate") 
{
    field(DESC, "Get Predefined Rate")
    field(DTYP, "stream")
    field( INP, "@devkeithley6514.proto getADRate $(PORT) $(A)")
    field(ZRST, "Slow")
    field(ZRVL, "0")
    field(ONST, "Med")
    field(ONVL, "1")
    field(TWST, "Fast")
    field(TWVL, "2")
    field(THSV, "INVALID")
    field(FRSV, "INVALID")
    field(FVSV, "INVALID")
    field(SXSV, "INVALID")
    field(SVSV, "INVALID")
    field(EISV, "INVALID")
    field(NISV, "INVALID")
    field(TESV, "INVALID")
    field(ELSV, "INVALID")
    field(TVSV, "INVALID")
    field(TTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FTSV, "INVALID")
    field(FFSV, "INVALID")
    field(UNSV, "INVALID")
    field(PINI, "YES")
}



# # Query current settings and one-time parameters (ID and SN)
# record(bo, "$(SYS)-$(SUBSYS):$(DEV):SetReady") 
# {
#     field(DESC, "Ready to measure currents")
#     field(PINI, "YES")
#     field(ZNAM, "Ready")
#     field(ONAM, "ready")
#     field(FLNK, "$(SYS)-$(SUBSYS):$(DEV):SetReady-Fout_")
# }

# record(fanout, "$(SYS)-$(SUBSYS):$(DEV):SetReady-Fout_") 
# {
#     field(LNK1, "$(SYS)-$(SUBSYS):$(DEV):Rst")
#     field(LNK2, "$(P)LockMode-RB")
#  }

